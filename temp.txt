const { search } = require("./src/routes/admin/categoryRoutes")

npm init -y
npm install express
npm install sequelize mysql2  # For MySQL  
npm install sequelize pg pg-hstore  # For PostgreSQL  
npm install jsonwebtoken
npm install cors
npm install dotenv
npm install express-validator
npx nodemon server.js


npm install express sequelize pg pg-hstore bcrypt jsonwebtoken dotenv i18next i18next-fs-backend i18next-http-middleware cors body-parser


#Bhavnagar 



// listingCategorys: async (req, res) => {
//     const { t } = req; // Get translation function from middleware
//     try {
//       // const { categoryname } = req.query;
//       // console.log("categoryName: ", categoryname);

//       // Get search parameter (if provided) and language from headers
//       // const search = req.query || "";
//       // console.log('search: ', search);

//       const categoryname = req.query.categoryname || "";
//       console.log("categoryname: ", categoryname);

//       const lang = req.headers.lang ? req.headers.lang : "en";
//       console.log("lang: ", lang);

//       //initialize localization
//       // req.setLocale(lang);
//       if (req.i18n && req.i18n.changeLanguage) {
//         req.i18n.changeLanguage(lang);
//       }

//       let { page, size } = req.query;

//       // // Convert query params to numbers and set defaults
//       page = Number(page) || 1; // Default to page 1
//       size = Number(size) || 10; // Default page size 10

//       // // Calculate offset
//       const offset = (page - 1) * size;
//       const limit = size;

//       // // Query MasterCategoryTrans using search on name and filtering by language and isDeleted flag
//       const categoriesData = await MasterCategoryTrans.findAndCountAll({
//         where: {
//           isDeleted: false,
//           lang,
//           // Use iLike for case-insensitive search on category name
//           name: {
//             [Op.iLike]: `%${search}%`,
//           },
//         },
//         include: [
//           {
//             model: MasterSubcategoryTrans,
//             as: "subcategories", // Make sure your association alias is "subcategories"
//             where: {
//               isDeleted: false,
//               lang,
//             },
//             required: false, // This allows categories with no subcategories to be included
//             attributes: ["id", "name", "isActive"],
//           },
//         ],
//         attributes: ["id", "name", "isActive"],
//         limit,
//         offset,
//         order: [["created_at", "DESC"]],
//       });

//       console.log("categoriesData: ", categoriesData);
//       if (!categoriesData || categoriesData.count === 0) {
//         return res.status(404).json({
//           message: t("api.categories.notFound") || "No categories found",
//         });
//       }

//       // Format the result as desired
//       const data = categoriesData.rows.map(category => ({
//         id: category.id,
//         name: category.name,
//         isActive: category.isActive,
//         subcategory: category.subcategories.map(sub => ({
//           id: sub.id,
//           name: sub.name,
//           isActive: sub.isActive,
//         })),
//       }));
//       return res.status(200).json({
//         message: t("api.categories.listSuccess") || "Categories listed successfully",
//         data,
//         totalCategories: categoriesData.count,
//         totalPages: Math.ceil(categoriesData.count / size),
//         currentPage: page,
//       });

//       // if (!categoryname) {
//       //   return res
//       //     .status(400)
//       //     .json({ message: t("api.categories.invalidInput") });
//       // }

//       // const category = await MasterCategoryTrans.findOne({
//       //   where: { name: categoryname , lang},
//       // });

//       // if (!category) {
//       //   return res.status(404).json({ message: t("api.categories.notFound") });
//       // }
//       // console.log("category: ", category);

//       // const subCategories = await MasterSubcategoryTrans.findAll({
//       //   where: { categoryId: category.id ,lang },
//       // });

//       // // Fetching details of all the players participated in the auction
//       // const categoriesData = await MasterCategoryTrans.findAndCountAll({
//       //   include: {
//       //     model: MasterSubcategoryTrans,
//       //     where: { id: category.master_category_id, isDeleted: false },
//       //     attributes: ["id", "name", "description"],
//       //   },
//       //   attributes: ["id", "name", "description"],
//       //   limit,
//       //   offset,
//       // });

//       // // If no categories are found, return a not-found response
//       // if (!categoriesData || categoriesData.count === 0) {
//       //   return res.status(404).json({ message: "No categories found" });
//       // }
//       // const data = {
//       //   totalCategories: categoriesData.count,
//       //   totalPages: Math.ceil(categoriesData.count / size),
//       //   currentPage: page,
//       //   categories: categoriesData.rows,
//       // };
//       // return res.status(200).json({
//       //   message: t("api.auth.search.success"),
//       //   // category,
//       //   // subCategories,
//       //   categoriesData,
//       // });
//     } catch (error) {
//       console.error("Error searching category:", error);
//       return res
//         .status(500)
//         .json({ message: t("api.errors.serverError"), error });
//     }
//   },


SELECT 
    ac.id AS "id", 
    ac."userId" AS "userId", 
    act.name AS "accountName", 
    act.lang AS "accountLang", 
    ac."categoryId" AS "categoryId", 
    ac."subcategoryId" AS "subcategoryId"
FROM accounts AS ac 
JOIN account_trans AS act 
    ON ac.id = act."Account_id"
WHERE ac."isDeleted" = false
ORDER BY ac.created_at DESC;



listingCategory: async (req, res) => {

    // const { t } = req; // Get translation function from middleware
    try {
      const { search } = req.query.q;
      console.log("search: ", search);
      if (search === null || search === "") {
        try {
          //if not search then return all categories with subcategories and translations
          // :large_green_circle: **Raw SQL Query to Fetch Categories, Their Translations, and Subcategories**
          const rawQuery = `
      SELECT
        mc.id AS category_id,
        mct.name AS category_name,
        mct.lang AS category_lang,
        mc."isActive" AS category_active,
        ms.id AS subcategory_id,
        mst.name AS subcategory_name,
        mst.lang AS subcategory_lang,
        mst."isActive" AS subcategory_active
          FROM master_categories as mc
          JOIN master_category_trans as mct ON mc.id = mct.master_category_id
          LEFT JOIN master_subcategories as ms ON mc.id = ms."categoryId" AND ms."isDeleted" = false
          LEFT JOIN master_subcategory_trans as mst ON ms.id = mst.master_subcategory_id
          WHERE mc."isDeleted" = false
          ORDER BY mc.created_at DESC
          `;
          // // Execute the raw query
          const categoriesData = await sequelize.query(rawQuery, {
            type: Sequelize.QueryTypes.SELECT,
          });
          console.log("Fetched Categories: ", categoriesData);
          if (!categoriesData || categoriesData.count === 0) {
            return res.status(404).json({
              message: t("api.categories.notFound") || "No categories found",
            });
          }
          const formattedData = categoriesData.reduce((acc, row) => {
            // Find if the category already exists in the accumulator
            let category = acc.find((c) => c.id === row.category_id);
            if (!category) {
              category = {
                id: row.category_id,
                name: [],
                isActive: row.category_active,
                subcategories: [],
              };
              acc.push(category);
            }
            // Add translation only if it's not already included
            if (row.category_name) {
              const existsCatName = category.name.some(
                (t) =>
                  t.lang === row.category_lang && t.value === row.category_name
              );
              if (!existsCatName) {
                category.name.push({
                  value: row.category_name,
                  lang: row.category_lang,
                });
              }
            }
            // Check if the subcategory already exists in the category's subcategories
            if (row.subcategory_id) {
              // Find or create the subcategory object within category.subcategories
              let subcat = category.subcategories.find(
                (s) => s.id === row.subcategory_id
              );
              if (!subcat) {
                subcat = {
                  id: row.subcategory_id,
                  name: [], // Array of subcategory translations
                  isActive: row.subcategory_active,
                };
                category.subcategories.push(subcat);
              }
              if (row.subcategory_name) {
                const existssubcatName = subcat.name.some(
                  (t) =>
                    t.lang === row.subcategory_lang &&
                    t.value === row.subcategory_name
                );
                if (!existssubcatName) {
                  subcat.name.push({
                    value: row.subcategory_name,
                    lang: row.subcategory_lang,
                  });
                }
              }
            }
            return acc;
          }, []);
          return res.status(200).json({
            message:
              i18n.__("api.categories.listSuccess") ||
              "Categories listed successfully",
            data: formattedData,
          });
        } catch (error) {
          console.error("Error searching category:", error);
          return res.status(500).json({
            message: i18n.__("api.errors.serverError"),
            error,
          });
        }
      } else {
        try {
          const lang = i18n.getLocale() || "en";
          console.log("lang: ", lang);
          console.log("Search Query:", `%${search}%`);
          // :large_green_circle: **Raw SQL Query to Fetch Categories, Their Translations, and Subcategories**
          const rawQuery = `
      SELECT
        mc.id AS category_id,
        mct.name AS category_name,
        mct.lang AS category_lang,
        mc."isActive" AS category_active,
        ms.id AS subcategory_id,
        mst.name AS subcategory_name,
        mst.lang AS subcategory_lang,
        mst."isActive" AS subcategory_active
          FROM master_categories as mc
          JOIN master_category_trans as mct ON mc.id = mct.master_category_id
          LEFT JOIN master_subcategories as ms ON mc.id = ms."categoryId" AND ms."isDeleted" = false
          LEFT JOIN master_subcategory_trans as mst ON ms.id = mst.master_subcategory_id
          WHERE mc."isDeleted" = false
              AND mct.name ILIKE :searchQuery
              AND mct.lang = :lang
              AND mst.lang = :lang
              ORDER BY mc.created_at DESC
              `;
          // LIMIT :limit OFFSET :offset;
          // // Execute the raw query
          const categoriesData = await sequelize.query(rawQuery, {
            replacements: {
              searchQuery: `%${search}%`,
              lang,
              // , limit, offset
            },
            type: Sequelize.QueryTypes.SELECT,
          });
          console.log("Fetched Categories: ", categoriesData);
          if (!categoriesData || categoriesData.count === 0) {
            return res.status(404).json({
              message: t("api.categories.notFound") || "No categories found",
            });
          }
          // //simple language wise
          const formattedData = categoriesData.reduce((acc, row) => {
            // It checks if this category already exists in acc (accumulator).
            let category = acc.find((c) => c.id === row.category_id);
            if (!category) {
              category = {
                id: row.category_id,
                name: row.category_name,
                isActive: row.category_active,
                lang: row.category_lang,
                subcategories: [],
              };
              acc.push(category);
            }
            if (row.subcategory_id) {
              category.subcategories.push({
                id: row.subcategory_id,
                name: row.subcategory_name,
                lang: row.subcategory_lang,
                isActive: row.subcategory_active,
              });
            }
            return acc;
          }, []);
          return res.status(200).json({
            message:
              i18n.__("api.categories.listSuccess") ||
              "Categories listed successfully",
            data: formattedData,
            // totalCategories: categoriesData.count,
            // totalPages: Math.ceil(categoriesData.count / size),
            // currentPage: page,
          });
        } catch (error) {
          console.error("Error searching category:", error);
          return res
            .status(500)
            .json({ message: i18n.__("api.errors.serverError"), error });
        }
      }
    } catch (error) {
      console.error("Error searching category:", error);
      return res
        .status(500)
        .json({ message: i18n.__("api.errors.serverError"), error });
    }
  },